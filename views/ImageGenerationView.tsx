
import React, { useState } from 'react';
import { generateImage } from '../services/geminiService';
import Spinner from '../components/Spinner';
import CodeBlock from '../components/CodeBlock';

const aspectRatios = ["1:1", "16:9", "9:16", "4:3", "3:4"];

const ImageGenerationView: React.FC = () => {
  const [prompt, setPrompt] = useState('A cinematic shot of a raccoon astronaut floating in space, surrounded by shimmering stars, hyper-realistic.');
  const [aspectRatio, setAspectRatio] = useState('1:1');
  const [imageUrl, setImageUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async () => {
    if (!prompt) {
      setError('Prompt cannot be empty.');
      return;
    }
    setIsLoading(true);
    setError('');
    setImageUrl('');
    try {
      const url = await generateImage(prompt, aspectRatio);
      setImageUrl(url);
    } catch (e: any) {
      setError(`An error occurred: ${e.message}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  const codeSnippet = `
const API_URL = "https://api.gemini-machine.com/v1/generate/image";
const API_KEY = "YOUR_API_MACHINE_KEY"; // Get from your dashboard

async function run() {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': \`Bearer \${API_KEY}\`
    },
    body: JSON.stringify({
      prompt: \`${prompt.replace(/`/g, '\\`')}\`,
      aspectRatio: "${aspectRatio}"
    })
  });

  const data = await response.json();
  // data.imageUrl contains the base64 encoded image string
  const newImage = document.createElement('img');
  newImage.src = data.imageUrl;
  document.body.appendChild(newImage);
}

run();
  `.trim();

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
            <label htmlFor="prompt" className="block text-sm font-medium text-content-200 mb-2">
            Image Description
            </label>
            <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A photo of a cat wearing sunglasses"
            className="w-full h-24 p-3 bg-base-200 border border-base-300 rounded-md focus:ring-2 focus:ring-brand-primary focus:outline-none transition"
            disabled={isLoading}
            />
        </div>
        <div>
          <label htmlFor="aspectRatio" className="block text-sm font-medium text-content-200 mb-2">
            Aspect Ratio
          </label>
          <select
            id="aspectRatio"
            value={aspectRatio}
            onChange={(e) => setAspectRatio(e.target.value)}
            className="w-full p-3 bg-base-200 border border-base-300 rounded-md focus:ring-2 focus:ring-brand-primary focus:outline-none transition"
            disabled={isLoading}
          >
            {aspectRatios.map(ar => <option key={ar} value={ar}>{ar}</option>)}
          </select>
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={isLoading}
        className="px-6 py-2 bg-brand-primary hover:bg-brand-secondary text-white font-semibold rounded-md shadow-md disabled:bg-gray-500 disabled:cursor-not-allowed transition-colors"
      >
        {isLoading ? <Spinner /> : 'Generate Image'}
      </button>

      {error && <div className="p-4 bg-red-900/50 text-red-200 border border-red-700 rounded-md">{error}</div>}
      
      <div className="mt-6">
        {isLoading && <div className="flex justify-center items-center h-64 bg-base-200 rounded-lg"><Spinner /></div>}
        {imageUrl && (
            <div>
                <h3 className="text-lg font-semibold text-white mb-2">Generated Image:</h3>
                <img src={imageUrl} alt="Generated by Gemini" className="max-w-full md:max-w-lg mx-auto rounded-lg shadow-lg" />
            </div>
        )}
      </div>
      
      <div>
        <h3 className="text-lg font-semibold text-white mt-8 mb-2">API Machine Endpoint</h3>
        <p className="text-sm text-content-200 mb-4">Use your unique API Key to call our image generation endpoint from your application.</p>
        <CodeBlock code={codeSnippet} language="javascript" />
      </div>
    </div>
  );
};

export default ImageGenerationView;
